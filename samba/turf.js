(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.turf = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}function along(e,r,t){if(t=t||{},!helpers.isObject(t))throw new Error("options is invalid");var n;if("Feature"===e.type)n=e.geometry.coordinates;else{if("LineString"!==e.type)throw new Error("input must be a LineString Feature or Geometry");n=e.coordinates}if(!helpers.isNumber(r))throw new Error("distance must be a number");for(var i=0,o=0;o<n.length&&!(r>=i&&o===n.length-1);o++){if(i>=r){var a=r-i;if(a){var u=bearing(n[o],n[o-1])-180;return destination(n[o],a,u,t)}return helpers.point(n[o])}i+=measureDistance(n[o],n[o+1],t)}return helpers.point(n[n.length-1])}var bearing=_interopDefault(require("@turf/bearing")),destination=_interopDefault(require("@turf/destination")),measureDistance=_interopDefault(require("@turf/distance")),helpers=require("@turf/helpers");module.exports=along,module.exports.default=along;
},{"@turf/bearing":2,"@turf/destination":4,"@turf/distance":5,"@turf/helpers":7}],2:[function(require,module,exports){
"use strict";function bearing(e,r,a){if(a=a||{},!helpers.isObject(a))throw new Error("options is invalid");if(!0===a.final)return calculateFinalBearing(e,r);var i=invariant.getCoord(e),n=invariant.getCoord(r),s=helpers.degreesToRadians(i[0]),t=helpers.degreesToRadians(n[0]),o=helpers.degreesToRadians(i[1]),l=helpers.degreesToRadians(n[1]),h=Math.sin(t-s)*Math.cos(l),d=Math.cos(o)*Math.sin(l)-Math.sin(o)*Math.cos(l)*Math.cos(t-s);return helpers.radiansToDegrees(Math.atan2(h,d))}function calculateFinalBearing(e,r){var a=bearing(r,e);return a=(a+180)%360}var invariant=require("@turf/invariant"),helpers=require("@turf/helpers");module.exports=bearing,module.exports.default=bearing;
},{"@turf/helpers":7,"@turf/invariant":8}],3:[function(require,module,exports){
"use strict";function clone(e){if(!e)throw new Error("geojson is required");switch(e.type){case"Feature":return cloneFeature(e);case"FeatureCollection":return cloneFeatureCollection(e);case"Point":case"LineString":case"Polygon":case"MultiPoint":case"MultiLineString":case"MultiPolygon":case"GeometryCollection":return cloneGeometry(e);default:throw new Error("unknown GeoJSON type")}}function cloneFeature(e){var t={type:"Feature"};return Object.keys(e).forEach(function(o){switch(o){case"type":case"properties":case"geometry":return;default:t[o]=e[o]}}),t.properties=cloneProperties(e.properties),t.geometry=cloneGeometry(e.geometry),t}function cloneProperties(e){var t={};return e?(Object.keys(e).forEach(function(o){var r=e[o];"object"==typeof r?null===r?t[o]=null:r.length?t[o]=r.map(function(e){return e}):t[o]=cloneProperties(r):t[o]=r}),t):t}function cloneFeatureCollection(e){var t={type:"FeatureCollection"};return Object.keys(e).forEach(function(o){switch(o){case"type":case"features":return;default:t[o]=e[o]}}),t.features=e.features.map(function(e){return cloneFeature(e)}),t}function cloneGeometry(e){var t={type:e.type};return e.bbox&&(t.bbox=e.bbox),"GeometryCollection"===e.type?(t.geometries=e.geometries.map(function(e){return cloneGeometry(e)}),t):(t.coordinates=deepSlice(e.coordinates),t)}function deepSlice(e){return"object"!=typeof e[0]?e.slice():e.map(function(e){return deepSlice(e)})}module.exports=clone,module.exports.default=clone;

},{}],4:[function(require,module,exports){
"use strict";function destination(e,s,a,r){if(r=r||{},!helpers.isObject(r))throw new Error("options is invalid");var t=r.units,i=r.properties,n=invariant.getCoord(e),o=helpers.degreesToRadians(n[0]),h=helpers.degreesToRadians(n[1]),d=helpers.degreesToRadians(a),p=helpers.lengthToRadians(s,t),l=Math.asin(Math.sin(h)*Math.cos(p)+Math.cos(h)*Math.sin(p)*Math.cos(d)),M=o+Math.atan2(Math.sin(d)*Math.sin(p)*Math.cos(h),Math.cos(p)-Math.sin(h)*Math.sin(l)),u=helpers.radiansToDegrees(M),c=helpers.radiansToDegrees(l);return helpers.point([u,c],i)}var invariant=require("@turf/invariant"),helpers=require("@turf/helpers");module.exports=destination,module.exports.default=destination;

},{"@turf/helpers":7,"@turf/invariant":8}],5:[function(require,module,exports){
"use strict";function distance(e,r,a){if(a=a||{},!helpers.isObject(a))throw new Error("options is invalid");var t=a.units,s=invariant.getCoord(e),i=invariant.getCoord(r),n=helpers.degreesToRadians(i[1]-s[1]),o=helpers.degreesToRadians(i[0]-s[0]),h=helpers.degreesToRadians(s[1]),d=helpers.degreesToRadians(i[1]),p=Math.pow(Math.sin(n/2),2)+Math.pow(Math.sin(o/2),2)*Math.cos(h)*Math.cos(d);return helpers.radiansToLength(2*Math.atan2(Math.sqrt(p),Math.sqrt(1-p)),t)}var invariant=require("@turf/invariant"),helpers=require("@turf/helpers");module.exports=distance,module.exports.default=distance;

},{"@turf/helpers":7,"@turf/invariant":8}],6:[function(require,module,exports){
"use strict";function explode(e){var r=[];return"FeatureCollection"===e.type?meta.featureEach(e,function(e){meta.coordEach(e,function(t){r.push(helpers.point(t,e.properties))})}):meta.coordEach(e,function(t){r.push(helpers.point(t,e.properties))}),helpers.featureCollection(r)}var meta=require("@turf/meta"),helpers=require("@turf/helpers");module.exports=explode,module.exports.default=explode;

},{"@turf/helpers":7,"@turf/meta":9}],7:[function(require,module,exports){
"use strict";function feature(r,e,t){if(t=t||{},!isObject(t))throw new Error("options is invalid");var o=t.bbox,i=t.id;if(void 0===r)throw new Error("geometry is required");if(e&&e.constructor!==Object)throw new Error("properties must be an Object");o&&validateBBox(o),i&&validateId(i);var n={type:"Feature"};return i&&(n.id=i),o&&(n.bbox=o),n.properties=e||{},n.geometry=r,n}function geometry(r,e,t){if(t=t||{},!isObject(t))throw new Error("options is invalid");var o=t.bbox;if(!r)throw new Error("type is required");if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");o&&validateBBox(o);var i;switch(r){case"Point":i=point(e).geometry;break;case"LineString":i=lineString(e).geometry;break;case"Polygon":i=polygon(e).geometry;break;case"MultiPoint":i=multiPoint(e).geometry;break;case"MultiLineString":i=multiLineString(e).geometry;break;case"MultiPolygon":i=multiPolygon(e).geometry;break;default:throw new Error(r+" is invalid")}return o&&(i.bbox=o),i}function point(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");if(r.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!isNumber(r[0])||!isNumber(r[1]))throw new Error("coordinates must contain numbers");return feature({type:"Point",coordinates:r},e,t)}function points(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");return featureCollection(r.map(function(r){return point(r,e)}),t)}function polygon(r,e,t){if(!r)throw new Error("coordinates is required");for(var o=0;o<r.length;o++){var i=r[o];if(i.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var n=0;n<i[i.length-1].length;n++){if(0===o&&0===n&&!isNumber(i[0][0])||!isNumber(i[0][1]))throw new Error("coordinates must contain numbers");if(i[i.length-1][n]!==i[0][n])throw new Error("First and last Position are not equivalent.")}}return feature({type:"Polygon",coordinates:r},e,t)}function polygons(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");return featureCollection(r.map(function(r){return polygon(r,e)}),t)}function lineString(r,e,t){if(!r)throw new Error("coordinates is required");if(r.length<2)throw new Error("coordinates must be an array of two or more positions");if(!isNumber(r[0][1])||!isNumber(r[0][1]))throw new Error("coordinates must contain numbers");return feature({type:"LineString",coordinates:r},e,t)}function lineStrings(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");return featureCollection(r.map(function(r){return lineString(r,e)}),t)}function featureCollection(r,e){if(e=e||{},!isObject(e))throw new Error("options is invalid");var t=e.bbox,o=e.id;if(!r)throw new Error("No features passed");if(!Array.isArray(r))throw new Error("features must be an Array");t&&validateBBox(t),o&&validateId(o);var i={type:"FeatureCollection"};return o&&(i.id=o),t&&(i.bbox=t),i.features=r,i}function multiLineString(r,e,t){if(!r)throw new Error("coordinates is required");return feature({type:"MultiLineString",coordinates:r},e,t)}function multiPoint(r,e,t){if(!r)throw new Error("coordinates is required");return feature({type:"MultiPoint",coordinates:r},e,t)}function multiPolygon(r,e,t){if(!r)throw new Error("coordinates is required");return feature({type:"MultiPolygon",coordinates:r},e,t)}function geometryCollection(r,e,t){if(!r)throw new Error("geometries is required");if(!Array.isArray(r))throw new Error("geometries must be an Array");return feature({type:"GeometryCollection",geometries:r},e,t)}function round(r,e){if(void 0===r||null===r||isNaN(r))throw new Error("num is required");if(e&&!(e>=0))throw new Error("precision must be a positive number");var t=Math.pow(10,e||0);return Math.round(r*t)/t}function radiansToLength(r,e){if(void 0===r||null===r)throw new Error("radians is required");if(e&&"string"!=typeof e)throw new Error("units must be a string");var t=factors[e||"kilometers"];if(!t)throw new Error(e+" units is invalid");return r*t}function lengthToRadians(r,e){if(void 0===r||null===r)throw new Error("distance is required");if(e&&"string"!=typeof e)throw new Error("units must be a string");var t=factors[e||"kilometers"];if(!t)throw new Error(e+" units is invalid");return r/t}function lengthToDegrees(r,e){return radiansToDegrees(lengthToRadians(r,e))}function bearingToAzimuth(r){if(null===r||void 0===r)throw new Error("bearing is required");var e=r%360;return e<0&&(e+=360),e}function radiansToDegrees(r){if(null===r||void 0===r)throw new Error("radians is required");return r%(2*Math.PI)*180/Math.PI}function degreesToRadians(r){if(null===r||void 0===r)throw new Error("degrees is required");return r%360*Math.PI/180}function convertLength(r,e,t){if(null===r||void 0===r)throw new Error("length is required");if(!(r>=0))throw new Error("length must be a positive number");return radiansToLength(lengthToRadians(r,e),t||"kilometers")}function convertArea(r,e,t){if(null===r||void 0===r)throw new Error("area is required");if(!(r>=0))throw new Error("area must be a positive number");var o=areaFactors[e||"meters"];if(!o)throw new Error("invalid original units");var i=areaFactors[t||"kilometers"];if(!i)throw new Error("invalid final units");return r/o*i}function isNumber(r){return!isNaN(r)&&null!==r&&!Array.isArray(r)}function isObject(r){return!!r&&r.constructor===Object}function validateBBox(r){if(!r)throw new Error("bbox is required");if(!Array.isArray(r))throw new Error("bbox must be an Array");if(4!==r.length&&6!==r.length)throw new Error("bbox must be an Array of 4 or 6 numbers");r.forEach(function(r){if(!isNumber(r))throw new Error("bbox must only contain numbers")})}function validateId(r){if(!r)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof r))throw new Error("id must be a number or a string")}function radians2degrees(){throw new Error("method has been renamed to `radiansToDegrees`")}function degrees2radians(){throw new Error("method has been renamed to `degreesToRadians`")}function distanceToDegrees(){throw new Error("method has been renamed to `lengthToDegrees`")}function distanceToRadians(){throw new Error("method has been renamed to `lengthToRadians`")}function radiansToDistance(){throw new Error("method has been renamed to `radiansToLength`")}function bearingToAngle(){throw new Error("method has been renamed to `bearingToAzimuth`")}function convertDistance(){throw new Error("method has been renamed to `convertLength`")}Object.defineProperty(exports,"__esModule",{value:!0});var earthRadius=6371008.8,factors={meters:earthRadius,metres:earthRadius,millimeters:1e3*earthRadius,millimetres:1e3*earthRadius,centimeters:100*earthRadius,centimetres:100*earthRadius,kilometers:earthRadius/1e3,kilometres:earthRadius/1e3,miles:earthRadius/1609.344,nauticalmiles:earthRadius/1852,inches:39.37*earthRadius,yards:earthRadius/1.0936,feet:3.28084*earthRadius,radians:1,degrees:earthRadius/111325},unitsFactors={meters:1,metres:1,millimeters:1e3,millimetres:1e3,centimeters:100,centimetres:100,kilometers:.001,kilometres:.001,miles:1/1609.344,nauticalmiles:1/1852,inches:39.37,yards:1/1.0936,feet:3.28084,radians:1/earthRadius,degrees:1/111325},areaFactors={meters:1,metres:1,millimeters:1e6,millimetres:1e6,centimeters:1e4,centimetres:1e4,kilometers:1e-6,kilometres:1e-6,acres:247105e-9,miles:3.86e-7,yards:1.195990046,feet:10.763910417,inches:1550.003100006};exports.earthRadius=earthRadius,exports.factors=factors,exports.unitsFactors=unitsFactors,exports.areaFactors=areaFactors,exports.feature=feature,exports.geometry=geometry,exports.point=point,exports.points=points,exports.polygon=polygon,exports.polygons=polygons,exports.lineString=lineString,exports.lineStrings=lineStrings,exports.featureCollection=featureCollection,exports.multiLineString=multiLineString,exports.multiPoint=multiPoint,exports.multiPolygon=multiPolygon,exports.geometryCollection=geometryCollection,exports.round=round,exports.radiansToLength=radiansToLength,exports.lengthToRadians=lengthToRadians,exports.lengthToDegrees=lengthToDegrees,exports.bearingToAzimuth=bearingToAzimuth,exports.radiansToDegrees=radiansToDegrees,exports.degreesToRadians=degreesToRadians,exports.convertLength=convertLength,exports.convertArea=convertArea,exports.isNumber=isNumber,exports.isObject=isObject,exports.validateBBox=validateBBox,exports.validateId=validateId,exports.radians2degrees=radians2degrees,exports.degrees2radians=degrees2radians,exports.distanceToDegrees=distanceToDegrees,exports.distanceToRadians=distanceToRadians,exports.radiansToDistance=radiansToDistance,exports.bearingToAngle=bearingToAngle,exports.convertDistance=convertDistance;

},{}],8:[function(require,module,exports){
"use strict";function getCoord(e){if(!e)throw new Error("obj is required");var r=getCoords(e);if(r.length>1&&helpers.isNumber(r[0])&&helpers.isNumber(r[1]))return r;throw new Error("Coordinate is not a valid Point")}function getCoords(e){if(!e)throw new Error("obj is required");var r;if(e.length?r=e:e.coordinates?r=e.coordinates:e.geometry&&e.geometry.coordinates&&(r=e.geometry.coordinates),r)return containsNumber(r),r;throw new Error("No valid coordinates")}function containsNumber(e){if(e.length>1&&helpers.isNumber(e[0])&&helpers.isNumber(e[1]))return!0;if(Array.isArray(e[0])&&e[0].length)return containsNumber(e[0]);throw new Error("coordinates must only contain numbers")}function geojsonType(e,r,o){if(!r||!o)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+o+": must be a "+r+", given "+e.type)}function featureOf(e,r,o){if(!e)throw new Error("No feature passed");if(!o)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+o+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+o+": must be a "+r+", given "+e.geometry.type)}function collectionOf(e,r,o){if(!e)throw new Error("No featureCollection passed");if(!o)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+o+", FeatureCollection required");for(var t=0;t<e.features.length;t++){var n=e.features[t];if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+o+", Feature with geometry required");if(!n.geometry||n.geometry.type!==r)throw new Error("Invalid input to "+o+": must be a "+r+", given "+n.geometry.type)}}function getGeom(e){if(!e)throw new Error("geojson is required");if(void 0!==e.geometry)return e.geometry;if(e.coordinates||e.geometries)return e;throw new Error("geojson must be a valid Feature or Geometry Object")}function getGeomType(){throw new Error("invariant.getGeomType has been deprecated in v5.0 in favor of invariant.getType")}function getType(e,r){if(!e)throw new Error((r||"geojson")+" is required");if(e.geometry&&e.geometry.type)return e.geometry.type;if(e.type)return e.type;throw new Error((r||"geojson")+" is invalid")}Object.defineProperty(exports,"__esModule",{value:!0});var helpers=require("@turf/helpers");exports.getCoord=getCoord,exports.getCoords=getCoords,exports.containsNumber=containsNumber,exports.geojsonType=geojsonType,exports.featureOf=featureOf,exports.collectionOf=collectionOf,exports.getGeom=getGeom,exports.getGeomType=getGeomType,exports.getType=getType;
},{"@turf/helpers":7}],9:[function(require,module,exports){
"use strict";function coordEach(e,t,o){if(null!==e)for(var r,n,c,i,a,u,l,s,f=0,g=0,p=e.type,h="FeatureCollection"===p,d="Feature"===p,y=h?e.features.length:1,m=0;m<y;m++){l=h?e.features[m].geometry:d?e.geometry:e,s=!!l&&"GeometryCollection"===l.type,a=s?l.geometries.length:1;for(var E=0;E<a;E++){var v=0,P=0;if(null!==(i=s?l.geometries[E]:l)){u=i.coordinates;var R=i.type;switch(f=!o||"Polygon"!==R&&"MultiPolygon"!==R?0:1,R){case null:break;case"Point":t(u,g,m,v,P),g++,v++;break;case"LineString":case"MultiPoint":for(r=0;r<u.length;r++)t(u[r],g,m,v,P),g++,"MultiPoint"===R&&v++;"LineString"===R&&v++;break;case"Polygon":case"MultiLineString":for(r=0;r<u.length;r++){for(n=0;n<u[r].length-f;n++)t(u[r][n],g,m,v,P),g++;"MultiLineString"===R&&v++,"Polygon"===R&&P++}"Polygon"===R&&v++;break;case"MultiPolygon":for(r=0;r<u.length;r++){for("MultiPolygon"===R&&(P=0),n=0;n<u[r].length;n++){for(c=0;c<u[r][n].length-f;c++)t(u[r][n][c],g,m,v,P),g++;P++}v++}break;case"GeometryCollection":for(r=0;r<i.geometries.length;r++)coordEach(i.geometries[r],t,o);break;default:throw new Error("Unknown Geometry Type")}}}}}function coordReduce(e,t,o,r){var n=o;return coordEach(e,function(e,r,c,i,a){n=0===r&&void 0===o?e:t(n,e,r,c,i,a)},r),n}function propEach(e,t){var o;switch(e.type){case"FeatureCollection":for(o=0;o<e.features.length;o++)t(e.features[o].properties,o);break;case"Feature":t(e.properties,0)}}function propReduce(e,t,o){var r=o;return propEach(e,function(e,n){r=0===n&&void 0===o?e:t(r,e,n)}),r}function featureEach(e,t){if("Feature"===e.type)t(e,0);else if("FeatureCollection"===e.type)for(var o=0;o<e.features.length;o++)t(e.features[o],o)}function featureReduce(e,t,o){var r=o;return featureEach(e,function(e,n){r=0===n&&void 0===o?e:t(r,e,n)}),r}function coordAll(e){var t=[];return coordEach(e,function(e){t.push(e)}),t}function geomEach(e,t){var o,r,n,c,i,a,u,l,s,f,g=0,p="FeatureCollection"===e.type,h="Feature"===e.type,d=p?e.features.length:1;for(o=0;o<d;o++){for(a=p?e.features[o].geometry:h?e.geometry:e,l=p?e.features[o].properties:h?e.properties:{},s=p?e.features[o].bbox:h?e.bbox:void 0,f=p?e.features[o].id:h?e.id:void 0,u=!!a&&"GeometryCollection"===a.type,i=u?a.geometries.length:1,n=0;n<i;n++)if(null!==(c=u?a.geometries[n]:a))switch(c.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":t(c,g,l,s,f);break;case"GeometryCollection":for(r=0;r<c.geometries.length;r++)t(c.geometries[r],g,l,s,f);break;default:throw new Error("Unknown Geometry Type")}else t(null,g,l,s,f);g++}}function geomReduce(e,t,o){var r=o;return geomEach(e,function(e,n,c,i,a){r=0===n&&void 0===o?e:t(r,e,n,c,i,a)}),r}function flattenEach(e,t){geomEach(e,function(e,o,r,n,c){var i=null===e?null:e.type;switch(i){case null:case"Point":case"LineString":case"Polygon":return void t(helpers.feature(e,r,{bbox:n,id:c}),o,0)}var a;switch(i){case"MultiPoint":a="Point";break;case"MultiLineString":a="LineString";break;case"MultiPolygon":a="Polygon"}e.coordinates.forEach(function(e,n){var c={type:a,coordinates:e};t(helpers.feature(c,r),o,n)})})}function flattenReduce(e,t,o){var r=o;return flattenEach(e,function(e,n,c){r=0===n&&0===c&&void 0===o?e:t(r,e,n,c)}),r}function segmentEach(e,t){flattenEach(e,function(e,o,r){var n=0;if(e.geometry){var c=e.geometry.type;"Point"!==c&&"MultiPoint"!==c&&coordReduce(e,function(c,i,a,u,l,s){var f=helpers.lineString([c,i],e.properties);return t(f,o,r,s,n),n++,i})}})}function segmentReduce(e,t,o){var r=o,n=!1;return segmentEach(e,function(e,c,i,a,u){r=!1===n&&void 0===o?e:t(r,e,c,i,a,u),n=!0}),r}function lineEach(e,t){if(!e)throw new Error("geojson is required");flattenEach(e,function(e,o,r){if(null!==e.geometry){var n=e.geometry.type,c=e.geometry.coordinates;switch(n){case"LineString":t(e,o,r,0,0);break;case"Polygon":for(var i=0;i<c.length;i++)t(helpers.lineString(c[i],e.properties),o,r,i)}}})}function lineReduce(e,t,o){var r=o;return lineEach(e,function(e,n,c,i){r=0===n&&void 0===o?e:t(r,e,n,c,i)}),r}Object.defineProperty(exports,"__esModule",{value:!0});var helpers=require("@turf/helpers");exports.coordEach=coordEach,exports.coordReduce=coordReduce,exports.propEach=propEach,exports.propReduce=propReduce,exports.featureEach=featureEach,exports.featureReduce=featureReduce,exports.coordAll=coordAll,exports.geomEach=geomEach,exports.geomReduce=geomReduce,exports.flattenEach=flattenEach,exports.flattenReduce=flattenReduce,exports.segmentEach=segmentEach,exports.segmentReduce=segmentReduce,exports.lineEach=lineEach,exports.lineReduce=lineReduce;

},{"@turf/helpers":7}],10:[function(require,module,exports){
"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}function nearestPoint(e,t){if(!e)throw new Error("targetPoint is required");if(!t)throw new Error("points is required");var r,n=1/0;return meta.featureEach(t,function(t,i){var o=distance(e,t);o<n&&(r=clone(t),r.properties.featureIndex=i,r.properties.distanceToPoint=o,n=o)}),r}var clone=_interopDefault(require("@turf/clone")),distance=_interopDefault(require("@turf/distance")),meta=require("@turf/meta");module.exports=nearestPoint,module.exports.default=nearestPoint;

},{"@turf/clone":3,"@turf/distance":5,"@turf/meta":9}],11:[function(require,module,exports){
module.exports={along:require("@turf/along"),nearestPoint:require("@turf/nearest-point"),explode:require("@turf/explode")};
},{"@turf/along":1,"@turf/explode":6,"@turf/nearest-point":10}]},{},[11])(11)
});
